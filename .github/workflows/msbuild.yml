name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  PROJECT_FILE_PATH: binary/projects/vs2019/Aura.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  DEBUG_CONFIGURATION: Debug
  BUILD_CONFIGURATION: Release

jobs:
  game-dlls:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Build debug game dlls
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m ${{env.PROJECT_FILE_PATH}} /p:Configuration=${{env.DEBUG_CONFIGURATION}}

    - name: Package debug game dlls
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        New-Item -Force -ItemType Directory @("$env:TEMP\debug","$env:TEMP\debug\aura")
        Copy-Item -Force binary/projects/vs2019/${{env.DEBUG_CONFIGURATION}}/auradll/aura.dll $env:TEMP/debug/aura
        Compress-Archive -LiteralPath $env:TEMP\debug -DestinationPath .\debug-game-dlls.zip -Force
    - name: Upload debug game dlls
      uses: actions/upload-artifact@v2
      with:
        name: debug-game-libs
        path: ./debug-game-dlls.zip

    - name: Build release game dlls
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m ${{env.PROJECT_FILE_PATH}} /p:Configuration=${{env.RELEASE_CONFIGURATION}}

    - name: Package release game dlls
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        New-Item -Force -ItemType Directory @("$env:TEMP\release","$env:TEMP\release\aura")
        Copy-Item -Force binary/projects/vs2019/${{env.RELEASE_CONFIGURATION}}/hldll/hl.dll $env:TEMP/release/aura
        Compress-Archive -LiteralPath $env:TEMP\release -DestinationPath .\release-game-dlls.zip -Force
    - name: Upload release game libs
      uses: actions/upload-artifact@v2
      with:
        name: release-game-libs
        path: ./release-game-dlls.zip

  game-so-libs:
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Update sources to include xenial main
      run: sudo su -c "echo 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial main' >> /etc/apt/sources.list"

    - name: Update sources to include xenial universe
      run: sudo su -c "echo 'deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe' >> /etc/apt/sources.list"

    - name: Update packages
      run: sudo apt update -y

    - name: Install make
      run: sudo apt-get install make

    - name: Install g++-4.8
      run: sudo apt install g++-4.8 gcc-4.8 -y

    - name: Install headers
      run: sudo apt-get install gcc-4.8-multilib g++-4.8-multilib -y

    - name: Build debug Linux so libs
      run: cd linux && make all CFG=${{env.DEBUG_CONFIGURATION}}

    - name: Package debug Linux so libs
      run: |
        cd linux
        mkdir ${{env.DEBUG_CONFIGURATION}}/aura && mv ${{env.DEBUG_CONFIGURATION}}/aura.so ${{env.DEBUG_CONFIGURATION}}/aura  ${{env.DEBUG_CONFIGURATION}}/aura
        zip -r debug-game-linux-libs.zip ${{env.DEBUG_CONFIGURATION}}/aura
    - name: Upload debug Linux game libs
      uses: actions/upload-artifact@v2
      with:
        name: debug-game-linux-libs
        path: ./linux/debug-game-linux-libs.zip

    - name: Build release Linux so libs
      run: cd linux && make all CFG=${{env.RELEASE_CONFIGURATION}}

    - name: Package release Linux so libs
      run: |
        cd linux
        mkdir ${{env.RELEASE_CONFIGURATION}}/aura && mv ${{env.RELEASE_CONFIGURATION}}/aura.so ${{env.RELEASE_CONFIGURATION}}/aura ${{env.RELEASE_CONFIGURATION}}/aura
        zip -r release-game-linux-libs.zip ${{env.RELEASE_CONFIGURATION}}/aura
    - name: Upload release Linux game libs
      uses: actions/upload-artifact@v2
      with:
        name: release-game-linux-libs
        path: ./linux/release-game-linux-libs.zip

  game-dylibs:
    runs-on: macOS-10.15

    steps:
    - uses: actions/checkout@v2

    - name: Install MacOSX10.8.sdk
      run: |
        mkdir /tmp/sdk && cd /tmp/sdk
        curl -sSL https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.8.sdk.tar.xz > sdk.tar
        tar -xvf sdk.tar
        sudo ln -s /tmp/sdk/MacOSX10.8.sdk $(/usr/bin/xcode-select -print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk
        rm sdk.tar
    - name: Build debug macOS dylibs
      run: cd linux && make all CFG=${{env.DEBUG_CONFIGURATION}}

    - name: Package debug macOS dylibs
      run: |
        cd linux
        mkdir ${{env.DEBUG_CONFIGURATION}}/hl && mv ${{env.DEBUG_CONFIGURATION}}/aura.dylib ${{env.DEBUG_CONFIGURATION}}/aura  ${{env.DEBUG_CONFIGURATION}}/aura
        zip -r debug-game-macos-dylibs.zip ${{env.DEBUG_CONFIGURATION}}/aura
    - name: Upload debug macOS game dylibs
      uses: actions/upload-artifact@v2
      with:
        name: debug-game-macos-dylibs
        path: ./linux/debug-game-macos-dylibs.zip

    - name: Build release macOS dylibs
      run: cd linux && make all CFG=${{env.RELEASE_CONFIGURATION}}

    - name: Package release macOS dylibs
      run: |
        cd linux
        mkdir ${{env.RELEASE_CONFIGURATION}}/hl && mv ${{env.RELEASE_CONFIGURATION}}/aura.dylib ${{env.RELEASE_CONFIGURATION}}/aura  ${{env.RELEASE_CONFIGURATION}}/hl
        zip -r release-game-macos-dylibs.zip ${{env.RELEASE_CONFIGURATION}}/aura
    - name: Upload release macOS game dylibs
      uses: actions/upload-artifact@v2
      with:
        name: release-game-macos-dylibs
        path: ./linux/release-game-macos-dylibs.zip